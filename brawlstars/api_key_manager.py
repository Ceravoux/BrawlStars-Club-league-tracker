import requests
from datetime import datetime


class BrawlStarsKeyManager:
    """Create an api key without manually going to the web interface."""

    HEADER = {"Content-Type": "application/json; charset=utf-8"}

    def __init__(self, email: str, password: str) -> None:
        self.__email = email
        self.__password = password
        self.__ip = requests.get("https://ifconfig.me").text
        login = self.login()
        self.cookies = login.cookies
        self.last_key_id = None

    def login(self):
        """Logins to https://developer.brawlstars.com/api/login with
        given email and password to activate a session. This is required
        because we need the cookies/session to create an api key.
        """
        r = requests.post(
            "https://developer.brawlstars.com/api/login",
            json={"email": self.__email, "password": self.__password},
            headers=self.HEADER,
        )
        if r.status_code == 403:
            raise ValueError(
                f'{r.json()["description"]} Register first '
                "to https://developer.brawlstars.com if you haven't already."
            )
        return r

    def create_key(self, additional_ips=[], delete_last=True) -> str:
        """Creates an api key with current ip. Add additional ips
        of your own if you want. Calling this function with `delete_last`
        as true will delete its last created key."""

        if self.last_key_id and delete_last:
            self.delete_key()
        if len(additional_ips) > 4:
            raise ValueError(
                "You can only add up to 5 ips"
                "due to the limitations imposed by"
                "the api."
            )
        r = requests.post(
            "https://developer.brawlstars.com/api/apikey/create",
            json={
                "name": "key",
                "description": f"auto-generated by BrawlStarsClient on "
                f"{datetime.utcnow().isoformat(timespec='seconds')}",
                "cidrRanges": [self.__ip] + additional_ips,
                "scopes": None,
            },
            headers=self.HEADER,
            cookies=self.cookies,
        )
        resp = r.json()
        self.last_key_id = resp["key"]["id"]
        self.apikey = resp["key"]["key"]
        return self.apikey

    def delete_key(self, id=None):
        """Deletes the last created apikey unless id is specified"""
        if id is None:
            if self.last_key_id is None:
                raise ValueError("nothing to do delete")
            id = self.last_key_id
            self.last_key_id = None

        r = requests.post(
            "https://developer.brawlstars.com/api/apikey/revoke",
            json={"id": id},
            headers=self.HEADER,
            cookies=self.cookies,
        )
        return r.status_code

    def list_key(self):
        """Retrieves all keys that you own along with their information."""
        r = requests.post(
            "https://developer.brawlstars.com/api/apikey/list",
            json={},
            headers=self.HEADER,
            cookies=self.cookies,
        )
        keys = r.json()["keys"]
        return keys

    def delete_all_keys(self):
        keys = self.list_key()
        for i in keys:
            self.delete_key(id=i["id"])
        return
